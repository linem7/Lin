% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coeff_table_logit.R
\name{coeff_table_logit}
\alias{coeff_table_logit}
\title{Create a formatted coefficient table for logistic and multinomial models}
\usage{
coeff_table_logit(
  model,
  digits = 3,
  p_digits = 3,
  ci = FALSE,
  stars = TRUE,
  notes = NULL,
  title = NULL,
  ...
)
}
\arguments{
\item{model}{A fitted model object.  Must be either:
- A `glm` with `family = binomial(link = "logit")`, or
- A `multinom` object from **nnet**.}

\item{digits}{Integer ≥ 0. Number of decimal places for b, SE, and OR.
Values nonzero but smaller than `1/10^digits` are shown as `< 0.xxx`.}

\item{p_digits}{Integer ≥ 0. Decimal places for p-values; values smaller than
`1/10^p_digits` are shown as `< 0.xxx`.}

\item{ci}{Logical; if `TRUE`, include 95% confidence intervals for the OR
computed via the Wald formula on the log-odds scale (SPSS style).}

\item{stars}{Logical; if `TRUE`, append `*` for p<.05, `**` for p<.01,
and `***` for p<.001 to the b values.}

\item{notes}{Optional character.  A footnote printed below the table.}

\item{title}{Optional character.  The table caption.}

\item{...}{Additional arguments passed to `knitr::kable()`.}
}
\value{
An HTML `kable` object (styled via **kableExtra**) showing b, SE, OR,
  p value, optional CI, and significance stars, with one block of columns per
  non-baseline outcome level.
}
\description{
`coeff_table_logit()` takes a fitted model—either a `glm(..., family=binomial)` or
a `nnet::multinom()`—and returns an HTML table of coefficients (b), standard errors (SE),
odds ratios (OR), p-values, optional confidence intervals (CI), and significance stars.
Categorical predictors are indented; very small numbers display as “< 0.01” or “< 0.001”.
}
\details{
By default, R uses the *first* factor level as the reference for both the outcome
(in `glm`) and any categorical predictors (`contr.treatment`).  SPSS by default
uses the *last* level.  As a result, the intercept (constant) may differ
numerically between R and SPSS.  To match SPSS’s intercept, relevel your outcome
and predictors in R, e.g.
```r
df$Y <- relevel(df$Y, ref = "1")        # if SPSS models “1” as success
df$gender <- relevel(df$gender, ref = "Female")
```
}
\examples{
# Binary logistic regression example (mtcars) ------------------------------
library(dplyr)
data(mtcars)
mtcars$am <- factor(mtcars$am,
                    levels = c(0,1),
                    labels = c("Automatic","Manual"))
glm_fit <- glm(am ~ mpg + factor(cyl) + hp,
               data   = mtcars,
               family = binomial(link = "logit"))
coeff_table_logit(
  glm_fit,
  digits    = 2,
  p_digits  = 3,
  ci        = TRUE,
  stars     = TRUE,
  notes     = "Standard errors in parentheses.",
  title     = "Logistic Regression on mtcars"
)

# Multinomial logistic regression example (iris) ----------------------------
library(nnet)
library(dplyr)
data(iris)
iris2 <- iris \%>\%
  mutate(WidthCat = cut(Sepal.Width,
                        breaks = 3,
                        labels = c("Small","Medium","Large")))
# match SPSS reference for Species = "setosa"
iris2$Species <- relevel(iris2$Species, ref = "setosa")
multinom_fit <- multinom(Species ~ Sepal.Length + Petal.Width + WidthCat,
                         data  = iris2,
                         trace = FALSE)
coeff_table_logit(
  multinom_fit,
  digits    = 3,
  p_digits  = 3,
  ci        = TRUE,
  stars     = FALSE,
  notes     = "Odds ratios and 95\% CIs via Wald method.",
  title     = "Iris Species Multinomial Model"
)

}
